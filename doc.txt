        __ПРЕПРОЦЕССОР___
1) МАКРОСЫ
Синтаксис:
    #def @имя_макроса(входные_параметры,...){тело_макроса};
    Входные параметры небходимо перечислять через запятую без пробелов(они учитываються при парсинге).
    Так же в данной версии пока не доступны влоености макросов, т.е. в теле макроса не должно быть вызовоов других макрососв,
    но можно передавать в качестве входных параметров константные выражения, но нельзя в параметры передавать другие макросы.
    При обьявлений макросов которые не принимают никаких параметров необходимо указывать пустой тип: #def @имя_макроса(void){...};

    Пример

    #def @SUM(num1,num2){num1+num2};
    #def @SUB(var1,var2){
    var1-var2
    };

    int sum = @SUM(1,2); // будет распоковано как: int sum = 1+2;
    int sub = @SUB(10,4); // будет расспаковано как: int sub = \n10-4\n да все символы \n,\r,\f,\t учитываються в теле макроса


2) КОНСТАНТНЫЕ ВЫРАЖЕНИЯ
Синтаксис:
    #const @имя_константного_выражения=значение;
    При обьявления константного выражения пробельные символы начиная с символа @ считаютьяс частью имени выражения или/и его значения,
     т.е. лучше опходиться без пробелов после символа @, nfr ;t cледует  учесть что константные выражения должны тутже инициализированные значением,
     тоесть они не должны быть без значения и так же переприсвоить им новое значение нельзя.

     Пример

     #const @VAR1=12;
     #const @VAR2=12+34/434%1.5;
     #const @VAR_MSG = "hello world";

3) ИМПОРТ ФАЙЛОВ(ТЕКСТА)
Синтаксис:
    #import имя_файла;
    Данный макрос просто парсит, берет иям файла которое должно импортироваться, берет все содержимое из импортируемого
    файла и подставляет на место директивы #import file_name;
    Следует учесть что если файл не найден или не доступен данному пользователю выбрасываеться исключение. По default'у ищет указанные файлы в
    той директории в которой находться программа, для доступа к другим файлам можно указывать полный путь.
